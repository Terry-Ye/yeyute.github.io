<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AT的博客</title>
  <subtitle>放下杂念,幸福天天</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-16T10:58:27.748Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>AT</name>
    <email>terry.dawu@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>适配器设计模式</title>
    <link href="http://yoursite.com/2016/05/01/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/05/01/适配器模式/</id>
    <published>2016-05-01T15:44:52.000Z</published>
    <updated>2017-03-16T10:58:27.748Z</updated>
    
    <content type="html"><![CDATA[<h3 id="适配器的适用场景"><a href="#适配器的适用场景" class="headerlink" title="适配器的适用场景"></a>适配器的适用场景</h3><ul>
<li>代码的复用性需求多的。</li>
<li>就像不同的手机充电一样，需要一个适配器使usb连接头和墙上插座相互兼容，分解问题可以得到 <ul>
<li>usb连接头 -&gt;不变</li>
<li>插座不变 -&gt;不变</li>
<li>数据线 -&gt;变</li>
</ul>
</li>
<li><p>活动专题，例抽奖，固定的规则是充值有抽奖机会，但是突然来了一个需求说充值还要分享才能有抽奖机会，这时可以运用上这个设计模式</p>
<p>题目（来自于php 设计模式 书） - 假设一个企业网站同时销售软件服务和软件产品，目前所有的交易都在美国进行，后续业务决定向欧洲发展要增加货币换算（增加适配器）</p>
</li>
</ul>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>灵活性扩展性都很好</li>
<li>将目标类和适配者类解耦</li>
</ol>
<h3 id="适配器所涉及的角色包括下面几种："><a href="#适配器所涉及的角色包括下面几种：" class="headerlink" title="适配器所涉及的角色包括下面几种："></a>适配器所涉及的角色包括下面几种：</h3><p>目标（Target）：定义一个客户端使用的特定接口。<br>客户端（Client）：使用目标接口，与和目标接口一致的对象合作。<br>被适配者（Adaptee）：一个现存需要适配的接口。<br>适配器（Adapter）：负责将Adaptee的接口转换为Target的接口。适配器是一个具体的类，这是该模式的核心。<br>适配器分为类适配器和对象适配器两种，下面将详细讲述。</p>
<h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><p>来自 php 设计模式 一书的适配器设计模式案例**<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * EuroCalc.php</div><div class="line"> * 美元 - 能累加购买的服务和产品的价格 来自于php 设计模式</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DollarCalc</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> $dollar;</div><div class="line">    <span class="keyword">private</span> $product;</div><div class="line">    <span class="keyword">private</span> $service;</div><div class="line">    <span class="keyword">public</span> $rate = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">requestCalc</span><span class="params">($productNow,$serviceNow)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;product = $productNow;</div><div class="line">        <span class="keyword">$this</span>-&gt;service = $serviceNow;</div><div class="line">        <span class="keyword">$this</span>-&gt;dollar = <span class="keyword">$this</span>-&gt;product + <span class="keyword">$this</span>-&gt;service;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;requestCount();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">requestCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;dollar *= <span class="keyword">$this</span>-&gt;rate;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;dollar;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * EuroCalc.php</div><div class="line"> * 欧元 -  能累加购买的服务和产品的价格</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EuroCalc</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> $euro;</div><div class="line">    <span class="keyword">private</span> $product;</div><div class="line">    <span class="keyword">private</span> $service;</div><div class="line">    <span class="keyword">public</span> $rate = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">requestCalc</span><span class="params">($productNow,$serviceNow)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;product = $productNow;</div><div class="line">        <span class="keyword">$this</span>-&gt;service = $serviceNow;</div><div class="line">        <span class="keyword">$this</span>-&gt;euro = <span class="keyword">$this</span>-&gt;product + <span class="keyword">$this</span>-&gt;service;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;requestCount();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">requestCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;euro *= <span class="keyword">$this</span>-&gt;rate;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;euro;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 接口 ITarget.php</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ITarget</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">requester</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 例：找一个合适的适配器来适合欧洲的插座一样，以下就是创建这个适配器</div><div class="line"> * EuroAdapter 实现了一个接口又扩展了一个类</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EuroAdapter</span> <span class="keyword">extends</span> <span class="title">EuroCalc</span> <span class="keyword">implements</span> <span class="title">ITarget</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;requester();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">requester</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;rate = <span class="number">0.8111</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;rate;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 用户</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> $euroRequest;</div><div class="line">    <span class="keyword">private</span> $dollarRequest;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;euroRequest = <span class="keyword">new</span> EuroAdapter();</div><div class="line">        <span class="keyword">$this</span>-&gt;dollarRequest = <span class="keyword">new</span> DollarCalc();</div><div class="line"></div><div class="line">        $euros = <span class="string">"&amp;#8364;"</span>;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Euros:$euros"</span>.<span class="keyword">$this</span>-&gt;makeAdapterRequest(<span class="keyword">$this</span>-&gt;euroRequest).<span class="string">"&lt;br /&gt;"</span>;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"dollar:"</span>.<span class="keyword">$this</span>-&gt;makeDollarRequest(<span class="keyword">$this</span>-&gt;dollarRequest);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeAdapterRequest</span><span class="params">(ITarget $req)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> $req-&gt;requestCalc(<span class="number">40</span>,<span class="number">50</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeDollarRequest</span><span class="params">(DollarCalc $req)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> $req-&gt;requestCalc(<span class="number">40</span>,<span class="number">50</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$worker = <span class="keyword">new</span> Client();</div></pre></td></tr></table></figure></p>
<h3 id="案例二-个人运用于自动化活动专题的接口设计"><a href="#案例二-个人运用于自动化活动专题的接口设计" class="headerlink" title="案例二 个人运用于自动化活动专题的接口设计"></a>案例二 个人运用于自动化活动专题的接口设计</h3><p>抽奖例子（代码只显示对应的设计逻辑部分）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 适配器模式 - 抽奖接口</div><div class="line"> * comment 当后台规则不满足自动化，可以添加对应的适配器，增加代码的复用</div><div class="line"> * author AT</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">controller</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 每个月份对应的适配器 06年3月 = SixMarch</span></div><div class="line"><span class="keyword">use</span> \<span class="title">Adapter</span>\<span class="title">SixMarch</span>\<span class="title">LotteryAdapter</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 抽奖接口 入口文件</div><div class="line"> */</div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Lottery</span> <span class="keyword">extends</span> <span class="title">WebController</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 活动的配置信息 存放后台配置的活动信息</span></div><div class="line">    <span class="keyword">private</span> $hd_info;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 加载配置信息</span></div><div class="line">        <span class="keyword">$this</span>-&gt;hd_info = <span class="string">''</span>; </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_lottery</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 实例</span></div><div class="line">        $lottery = <span class="keyword">new</span> LotteryAdapter($hd_info);</div><div class="line">        <span class="comment">// 取得抽奖结果</span></div><div class="line">        $rs      = $lottery-&gt;_getLotteryResult();</div><div class="line">        <span class="keyword">return</span> $rs;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">controller</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> \<span class="title">bbts</span>\<span class="title">App</span> <span class="title">as</span> <span class="title">BaseApp</span>;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LotteryAdapter</span> <span class="keyword">extends</span> <span class="title">AutoLottery</span> <span class="keyword">implements</span> <span class="title">ILottery</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($hd_info)</span> </span>&#123;</div><div class="line">        <span class="comment">// 后台配置是否需要使用适配器</span></div><div class="line">        <span class="keyword">if</span>($hd_info[<span class="string">'use_adapter'</span>] === <span class="keyword">true</span>) &#123;</div><div class="line">            $adapter_name = $hd_info[<span class="string">'adapter_name'</span>];</div><div class="line">            <span class="comment">// $adapter_name = 'adapter_name'; test</span></div><div class="line">            <span class="keyword">$this</span>-&gt;$adapter_name();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * adapter_name 该活动对应的适配器</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">adapter_name</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 假设不符合自动化的需求条件是必须进入游戏后5分才可抽奖，增加适配器的该内容即可，从而不用重写整个抽奖活动</span></div><div class="line">        $game_info = App::$app-&gt;model()-&gt;checkEnterGameInfo();</div><div class="line">        <span class="keyword">if</span>(strtotime($info[<span class="string">'TIME'</span>]) - time() &lt; <span class="number">300</span>) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;adapter_status = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">$this</span>-&gt;adapter_code   = <span class="number">-51</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">controller</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> \<span class="title">bbts</span>\<span class="title">App</span> <span class="title">as</span> <span class="title">BaseApp</span>;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 自动化抽奖接口的基类</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoLottery</span> </span>&#123;</div><div class="line">     <span class="comment">// 单独开发条件的状态</span></div><div class="line">    <span class="keyword">public</span> $adapter_status = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">public</span> $adapter_code = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_getLotteryResult</span><span class="params">()</span></span>&#123;</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//  最后判断适配器的状态</span></div><div class="line">        <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;adapter_status) &#123;</div><div class="line">            App::jetJsonpOutput(<span class="keyword">$this</span>-&gt;adapter_return_code);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 业务逻辑判断</span></div><div class="line">        </div><div class="line">        <span class="comment">// 通过则将数据入库</span></div><div class="line">        $rs_status = App::$app-&gt;model()-&gt;insert($rs);</div><div class="line">       </div><div class="line">        <span class="comment">// 返回结果</span></div><div class="line">        <span class="keyword">return</span> $rs;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      php,适配器设计模式,设计模式
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>状态设计模式</title>
    <link href="http://yoursite.com/2016/04/12/%E7%8A%B6%E6%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/04/12/状态设计模式/</id>
    <published>2016-04-12T14:59:32.000Z</published>
    <updated>2017-03-16T09:29:24.240Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么时候适用状态设计模式"><a href="#什么时候适用状态设计模式" class="headerlink" title="什么时候适用状态设计模式"></a>什么时候适用状态设计模式</h3><ul>
<li>有大量的判断状态的条件</li>
<li>状态模式的作用就是允许对象在状态改变时改变其行为，所以根据业务需求进行分析。</li>
</ul>
<h3 id="最基本的场景例子-比起全部判断语句的做法，这不是更好么"><a href="#最基本的场景例子-比起全部判断语句的做法，这不是更好么" class="headerlink" title="最基本的场景例子(比起全部判断语句的做法，这不是更好么)"></a>最基本的场景例子(比起全部判断语句的做法，这不是更好么)</h3><ul>
<li>开灯关灯</li>
<li>扩展 开灯-&gt;加亮-&gt;再加亮-&gt;关灯</li>
<li>九宫格的数字移动游戏</li>
</ul>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>它将与特定状态相关的行为局部化，并且将不同状态的行为分割开来:</li>
<li>代码清晰可见，扩展性好</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>状态模式的使用必然会增加系统类和对象的个数。</li>
</ul>
<p><strong>只做开灯关灯例子说明 学习于php 设计模式（强烈推荐这本书）</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * content.class.php</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">content</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> $onState;</div><div class="line">    <span class="keyword">private</span> $offState;</div><div class="line">    <span class="keyword">private</span> $currentState;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;onState      = <span class="keyword">new</span> OnState(<span class="keyword">$this</span>);</div><div class="line">        <span class="keyword">$this</span>-&gt;offState     = <span class="keyword">new</span> offState(<span class="keyword">$this</span>);</div><div class="line">        <span class="keyword">$this</span>-&gt;currentState = <span class="keyword">$this</span>-&gt;offState;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * [trueOnLight 开灯]</div><div class="line">     * <span class="doctag">@return</span> [type] [description]</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">trueOnLight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;currentState-&gt;onLight();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * [trueOffLight 关灯]</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">trueOffLight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;currentState-&gt;offLight();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * [getState 取得关灯的实例]</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getOffState</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;offState;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * [getOnState 取得开灯实例]</div><div class="line">     * <span class="doctag">@return</span> [type] [description]</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getOnState</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;onState;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * [setState 设置当前的实例]</div><div class="line">     * <span class="doctag">@param</span> Istate $state [description]</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setState</span><span class="params">(Istate $state)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;currentState = $state;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 接口 IState.php</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">IState</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onLight</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">offLight</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 开灯状态 OnState.class.php</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnState</span> <span class="keyword">implements</span> <span class="title">IState</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> $content;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Content $content)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;content =  $content;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * [onLight 开灯行为方法]</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onLight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'已经开灯了&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * [offLight 关灯行为方法]</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offLight</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;content-&gt;setState(<span class="keyword">$this</span>-&gt;content-&gt;getOffState());</div><div class="line">        <span class="keyword">return</span> <span class="string">'关灯了&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 关灯状态 OffState.class.php</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OffState</span> <span class="keyword">implements</span> <span class="title">IState</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> $content;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Content $content)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;content = $content;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * [onLight 开灯行为方法]</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onLight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;content-&gt;setState(<span class="keyword">$this</span>-&gt;content-&gt;getOnState());</div><div class="line">        <span class="keyword">return</span> <span class="string">'开灯了&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * [offLight 关灯行为方法]</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offLight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'已经关灯了&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 用户调用用例 </div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">client</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> $content;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;content = <span class="keyword">new</span> content();</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;content-&gt;trueOnLight();</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;content-&gt;trueOnLight();</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;content-&gt;trueOffLight();</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;content-&gt;trueOffLight();<span class="keyword">exit</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$client = <span class="keyword">new</span> client();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"><span class="comment">/** </span></div><div class="line"> * 实例化一个Context 实例之后，初始请求是打开灯，因为灯默认是关的 ，请求显示的结果如下</div><div class="line"> * 开灯了</div><div class="line"> * 已经开灯了</div><div class="line"> * 关灯了</div><div class="line"> * 已经关灯了</div><div class="line"> */</div></pre></td></tr></table></figure></p>
<blockquote>
<p>每一个行动中，我们必须把目光放到我们的过去、现在和将来的行动之外，<br>还要超越这些行为影响到的其他人，而看到所有这一切之间的关系，<br>这样一来，我们就会非常的谨慎</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      php,状态设计模式,设计模式
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://yoursite.com/2016/04/11/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/04/11/单例模式/</id>
    <published>2016-04-11T12:04:54.000Z</published>
    <updated>2017-03-16T09:08:38.361Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单例模式的特点"><a href="#单例模式的特点" class="headerlink" title="单例模式的特点"></a>单例模式的特点</h3><ul>
<li>只能有一个实例</li>
<li>必须自行创建这个实例</li>
<li>必须给其他对象提供这一实例</li>
</ul>
<h3 id="单例类"><a href="#单例类" class="headerlink" title="单例类"></a>单例类</h3><ul>
<li>构造函数需要标记为private（访问控制：防止外部代码使用new操作符创建对象），单例类不能在其他类中实例化，只能被其自身实例化；</li>
<li>拥有一个保存类的实例的静态成员变量(非成静态员：所有没有加Static的成员都是非静态成员,当类被实例化之后,可以通过实例化的类名进行访问..非静态成员的生存期决定于该类的生存期..而静态成员则不存在生存期的概念,因为静态成员始终驻留在内容中..)</li>
<li>拥有一个访问这个实例的公共的静态方法（常用getInstance()方法进行实例化单例类，通过instanceof操作符可以检测到类是否已经被实例化）</li>
</ul>
<h3 id="为什么要使用PHP单例模式？"><a href="#为什么要使用PHP单例模式？" class="headerlink" title="为什么要使用PHP单例模式？"></a>为什么要使用PHP单例模式？</h3><ul>
<li>虽然PHP每次执行完页面都是会从内存中清理掉所有的资源. 因而PHP中的单例实际每次运行都是需要重新实例化的，但PHP一个主要应用场合就是应用程序与数据库打交道的场景，在一个应用中会存在大量的数据库操作，针对数据库句柄连接数据库的行为，使用单例模式可以避免大量的new操作。因为每一次new操作都会消耗系统和内存的资源。</li>
</ul>
<h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ul>
<li>改进系统的设计</li>
<li>是对全局变量的一种改进</li>
</ul>
<h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ul>
<li>难于调试</li>
<li>隐藏的依赖关系</li>
<li>无法用错误类型的数据覆写一个单例</li>
</ul>
]]></content>
    
    <summary type="html">
    
      php,单例模式,设计模式
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>秒杀活动的架构设计</title>
    <link href="http://yoursite.com/2016/03/09/%E7%A7%92%E6%9D%80%E6%B4%BB%E5%8A%A8%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2016/03/09/秒杀活动的架构设计/</id>
    <published>2016-03-09T09:04:18.000Z</published>
    <updated>2017-03-09T07:14:05.230Z</updated>
    
    <content type="html"><![CDATA[<h3 id="业务的基本说明"><a href="#业务的基本说明" class="headerlink" title="业务的基本说明"></a>业务的基本说明</h3><ol>
<li>运营评估最高的并发会达到  10W（根据推广的力度，以及以往的经验）</li>
<li>业务现有的服务器架构 反向代理 4台，前端机 8台， db 2台（主从），redis 2台（主从）以下是服务器架构图</li>
</ol>
<p><img src="https://yeyute.github.io/assets/msjgt.jpg" alt="服务器架构图"></p>
<h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><p>html 等静态文件上CDN ，这方面压力不大<br>后台程序动态接口，必须支持高并发，用户体验必须做好<br>后端程序优化点（欢迎大家补充）</p>
<ul>
<li>程序尽可能的减少加载的文件</li>
<li>程序减少不必要的网络请求</li>
<li>redis 队列来作 异步方式实现</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 后台进程消费队列 个人使用brpoplpush方法 取出数据并用存入另外队列作数据备份</span></div><div class="line">$block_expire_time = <span class="number">0</span>; <span class="comment"># 设置阻塞等待时间为永久</span></div><div class="line">$redis-&gt;brpoplpush($key, $backup_key, $block_expire_time);</div></pre></td></tr></table></figure>
<ul>
<li>redis 缓存</li>
<li>前端点击按钮请求后变灰，防止用户重复点击</li>
<li>静态文件上CDN </li>
<li>nginx的最大连接数设置为550，防止连接数过大时全部到php，导致php服务挂了</li>
<li>针对每个用户加并发锁（redis），防止高并发情况判断条件被绕过,程序执行完后解锁。</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$lock_status = $redis-&gt;set($lock_key, <span class="number">1</span>, <span class="keyword">array</span>(<span class="string">"NX"</span>, <span class="string">"EX"</span>=&gt;$expire_time));</div></pre></td></tr></table></figure>
<h3 id="高并发下奖品超发问题"><a href="#高并发下奖品超发问题" class="headerlink" title="高并发下奖品超发问题"></a>高并发下奖品超发问题</h3><p>个人设计的方案：提前把每个奖品放入 redis队列，每个key一个奖品，队列的长度是奖品的数量，可以保证奖品不会超发放<br>另外，假设使用<br>悲观锁，在更新数据的时候加锁，其它的都为等待状态，不合适秒杀场景<br>乐观锁 基本是采用带版本号更新，版本号匹配才能更新，其它的回滚，虽然保证的数据的安全不超发放，但是在高并发场景下，DB只有两台的时候，超过mysql 进程堆积肯定会的， 超过最大连接数是怎么办，一系列的问题需要解决，所以该方案不合适</p>
<h3 id="程序压测结果分析服务器能抗的并发"><a href="#程序压测结果分析服务器能抗的并发" class="headerlink" title="程序压测结果分析服务器能抗的并发"></a>程序压测结果分析服务器能抗的并发</h3><p>在平均响应时间300ms内，单台qps 750 左右（保持300ms是公司压测试的规范指标）<br>10台机器（后面新增2台到 8+2）一秒钟能处理： 10 * 750/0.3 = 25000<br>但是系统在高并发的状态下，响应时间有可能从300ms 变成500ms，所以在做评估，需要预留一定的空间<br>那么问题来了，<br>保守的并发只有1.5W,与10w 差距大，需要在执行方案上解决，公司不可无限的申请web机器。<br>解决10W并发问题(资源有限的情况)方案<br>在代理层做处理，根据权重挡掉90%的量，返回800（自定义），前端判断是否为800，是则提示火爆用户重试（对应的方案设置友好一些）</p>
<h3 id="活动的序列图及说明"><a href="#活动的序列图及说明" class="headerlink" title="活动的序列图及说明"></a>活动的序列图及说明</h3><ol>
<li>接口程序不连接查询mysql数据库</li>
<li>奖品的数据存放redis队列，每个奖品一个key，队列长度是奖品的数量</li>
<li>用户成功领取红包（或抢购）时的代码流程（不包括业务限制与防刷），从队列获取奖品成功，再入队列（此队列后台消费入库），返回给用户领取成功。在用户体验上有所提升，但如果后台队列堆积太多，未能消费完成，用户查看的红包时是没有对应记录的，所以针对自己的需求作对应的优化。</li>
</ol>
<p><img src="https://yeyute.github.io/assets/xlt.jpg" alt="活动流程图"></p>
<h3 id="活动流程图（开爷画的）"><a href="#活动流程图（开爷画的）" class="headerlink" title="活动流程图（开爷画的）"></a>活动流程图（开爷画的）</h3><p><img src="https://yeyute.github.io/assets/lct.png" alt="活动流程图"></p>
]]></content>
    
    <summary type="html">
    
      稳定版本的设计
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="架构设计" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>用脚步丈量家乡 - 汕尾</title>
    <link href="http://yoursite.com/2016/02/22/%E7%94%A8%E8%84%9A%E6%AD%A5%E4%B8%88%E9%87%8F%E5%AE%B6%E4%B9%A1-%E6%B1%95%E5%B0%BE/"/>
    <id>http://yoursite.com/2016/02/22/用脚步丈量家乡-汕尾/</id>
    <published>2016-02-22T10:00:11.000Z</published>
    <updated>2017-03-10T09:58:50.322Z</updated>
    
    <content type="html"><![CDATA[<h3 id="汕尾"><a href="#汕尾" class="headerlink" title="汕尾"></a>汕尾</h3><p>或许汕尾这个城市鲜为人知，一般情况下说汕尾，对方都会复读一次是“汕头”来确认，但汕尾确实是以后可以养老的好地方，空气质量好，生活节奏慢.</p>
<p>不过大家都为了理想而各奔东西，每年回家乡的次数也有限，借着春节的假期，各种聚会的疯狂过后，去认真的体会一下家乡的自然与空气，这种熟悉且又有了陌生的感觉，让人心平气静。</p>
<p>沿着汕尾海边街，一路顶着海风飞（man）奔（pao）起来，想知道在海边跑步是什么感受的话，我来告诉你，就一个字，爽。</p>
<h3 id="下面贴个跑步的小地图"><a href="#下面贴个跑步的小地图" class="headerlink" title="下面贴个跑步的小地图"></a>下面贴个跑步的小地图</h3><p><img src="https://yeyute.github.io/assets/pbdt.jpg" alt=""></p>
<h3 id="海边街"><a href="#海边街" class="headerlink" title="海边街"></a>海边街</h3><p>相比广州珠江边，这里更具有清新的气息，看着这条路上运动的人越来越多，个人感觉是汕尾人民对自我生活的一种提升吧。</p>
<p><img src="https://yeyute.github.io/assets/hbj.jpg" alt=""></p>
<p>跑步有一片蓝天，像玩家有着好的游戏体验一样，跑步真是一项最简单的运动</p>
<p><img src="https://yeyute.github.io/assets/lt.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      跑步
    
    </summary>
    
      <category term="Life" scheme="http://yoursite.com/categories/Life/"/>
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 查询今天、昨天、最近7天、最近30天的优化</title>
    <link href="http://yoursite.com/2016/01/10/Mysql%20%E6%9F%A5%E8%AF%A2%E4%BB%8A%E5%A4%A9%E3%80%81%E6%98%A8%E5%A4%A9%E3%80%81%E6%9C%80%E8%BF%917%E5%A4%A9%E3%80%81%E6%9C%80%E8%BF%9130%E5%A4%A9%E7%9A%84%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2016/01/10/Mysql 查询今天、昨天、最近7天、最近30天的优化/</id>
    <published>2016-01-10T15:48:47.000Z</published>
    <updated>2017-03-16T09:13:27.296Z</updated>
    
    <content type="html"><![CDATA[<p>表结构<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`createtime`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">  <span class="string">`price`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</div><div class="line">  <span class="keyword">KEY</span> <span class="string">`createtime`</span> (<span class="string">`createtime`</span>) <span class="keyword">USING</span> BTREE</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>  <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure></p>
<p>查询分析 今天、昨天、最近7天、最近30天的收入总数<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">sum</span>(price) <span class="keyword">as</span> <span class="built_in">number</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> <span class="keyword">to_days</span>(<span class="keyword">date_format</span>(FROM_UNIXTIME(<span class="string">`createtime`</span>),<span class="string">'%Y-%m-%d'</span>))=<span class="keyword">to_days</span>(<span class="keyword">now</span>()) </div><div class="line"><span class="keyword">UNION</span> ALL </div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">sum</span>(price) <span class="keyword">as</span> <span class="built_in">number</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> <span class="keyword">TO_DAYS</span>( <span class="keyword">NOW</span>( ) ) - <span class="keyword">TO_DAYS</span>( <span class="keyword">date_format</span>(FROM_UNIXTIME(<span class="string">`createtime`</span>),<span class="string">'%Y-%m-%d'</span>)) &lt;= <span class="number">1</span> &amp;&amp; <span class="keyword">to_days</span>(<span class="keyword">date_format</span>(FROM_UNIXTIME(<span class="string">`createtime`</span>),<span class="string">'%Y-%m-%d'</span>))!=<span class="keyword">to_days</span>(<span class="keyword">now</span>()) </div><div class="line"><span class="keyword">UNION</span> ALL </div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">sum</span>(price) <span class="keyword">as</span> <span class="built_in">number</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">where</span> <span class="keyword">DATE_SUB</span>(<span class="keyword">CURDATE</span>(), <span class="built_in">INTERVAL</span> <span class="number">7</span> <span class="keyword">DAY</span>) &lt;= <span class="built_in">date</span>(<span class="keyword">date_format</span>(FROM_UNIXTIME(<span class="string">`createtime`</span>),<span class="string">'%Y-%m-%d'</span>)) </div><div class="line"><span class="keyword">UNION</span> ALL </div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">sum</span>(price) <span class="keyword">as</span> <span class="built_in">number</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">where</span> <span class="keyword">DATE_SUB</span>(<span class="keyword">CURDATE</span>(), <span class="built_in">INTERVAL</span> <span class="number">30</span> <span class="keyword">DAY</span>) &lt;= <span class="built_in">date</span>(<span class="keyword">date_format</span>(FROM_UNIXTIME(<span class="string">`createtime`</span>),<span class="string">'%Y-%m-%d'</span>))</div></pre></td></tr></table></figure></p>
<p>加了索引的情况下用不到索引</p>
<p>这里是图片</p>
<p>使用php程序时使用<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">sum</span>(price) <span class="keyword">as</span> <span class="built_in">number</span> <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">to_days</span>(<span class="keyword">date_format</span>(FROM_UNIXTIME(<span class="string">`createtime`</span>),<span class="string">'%Y-%m-%d'</span>))=<span class="keyword">to_days</span>(<span class="keyword">now</span>()) </div><div class="line"><span class="keyword">UNION</span> ALL </div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">sum</span>(price) <span class="keyword">as</span> <span class="built_in">number</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">TO_DAYS</span>( <span class="keyword">NOW</span>( ) ) - <span class="keyword">TO_DAYS</span>( <span class="keyword">date_format</span>(FROM_UNIXTIME(<span class="string">`createtime`</span>),<span class="string">'%Y-%m-%d'</span>)) &lt;= <span class="number">1</span> &amp;&amp; <span class="keyword">to_days</span>(<span class="keyword">date_format</span>(FROM_UNIXTIME(<span class="string">`createtime`</span>),<span class="string">'%Y-%m-%d'</span>))!=<span class="keyword">to_days</span>(<span class="keyword">now</span>()) </div><div class="line"><span class="keyword">UNION</span> ALL </div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">sum</span>(price) <span class="keyword">as</span> <span class="built_in">number</span> <span class="keyword">FROM</span> student <span class="keyword">where</span> <span class="keyword">DATE_SUB</span>(<span class="keyword">CURDATE</span>(), <span class="built_in">INTERVAL</span> <span class="number">7</span> <span class="keyword">DAY</span>) &lt;= <span class="built_in">date</span>(<span class="keyword">date_format</span>(FROM_UNIXTIME(<span class="string">`createtime`</span>),<span class="string">'%Y-%m-%d'</span>)) </div><div class="line"><span class="keyword">UNION</span> ALL </div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">sum</span>(price) <span class="keyword">as</span> <span class="built_in">number</span> <span class="keyword">FROM</span> student <span class="keyword">where</span> <span class="keyword">DATE_SUB</span>(<span class="keyword">CURDATE</span>(), <span class="built_in">INTERVAL</span> <span class="number">30</span> <span class="keyword">DAY</span>) &lt;= <span class="built_in">date</span>(<span class="keyword">date_format</span>(FROM_UNIXTIME(<span class="string">`createtime`</span>),<span class="string">'%Y-%m-%d'</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">sum</span>(price) <span class="keyword">as</span> <span class="built_in">number</span> <span class="keyword">from</span> student <span class="keyword">where</span> createtime&gt;=<span class="string">'1489161600'</span></div><div class="line"><span class="keyword">UNION</span> ALL </div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">sum</span>(price) <span class="keyword">as</span> <span class="built_in">number</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> createtime&gt;=<span class="string">'1489075200'</span> &amp;&amp; createtime&lt;=<span class="string">'1489161600'</span></div><div class="line"><span class="keyword">UNION</span> ALL </div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">sum</span>(price) <span class="keyword">as</span> <span class="built_in">number</span> <span class="keyword">FROM</span> student <span class="keyword">where</span> createtime&gt;=<span class="string">'1488556800'</span> &amp;&amp; createtime&lt;=<span class="string">'1489247999'</span></div><div class="line"><span class="keyword">UNION</span> ALL </div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">sum</span>(price) <span class="keyword">as</span> <span class="built_in">number</span> <span class="keyword">FROM</span> student <span class="keyword">where</span> createtime&gt;=<span class="string">'1486483200'</span> &amp;&amp; createtime&lt;=<span class="string">'1489247999'</span></div></pre></td></tr></table></figure></p>
<h3 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h3><p>后续补</p>
]]></content>
    
    <summary type="html">
    
      mysql
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 字段类型</title>
    <link href="http://yoursite.com/2016/01/03/Mysql-%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2016/01/03/Mysql-字段类型/</id>
    <published>2016-01-03T12:16:38.000Z</published>
    <updated>2017-03-10T01:55:44.308Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CHAR"><a href="#CHAR" class="headerlink" title="CHAR"></a>CHAR</h3><ol>
<li>类型是定长 删除末尾的空格，不会删除前面的空格</li>
<li>适合存储很短的字符串，或者所有值都接近同一个长度。例如: 适合存储MD5的密码串</li>
<li>定长的CHAR不容易产生碎片</li>
<li>对于非常短的列，CHAR比VARCHAR在存储更有效率。例如: CHAR(1) 来存储只有Y 和 N 的值，VARCHAR需要2个字节，CHAR只需要一个字节</li>
</ol>
<h3 id="VARCHAR"><a href="#VARCHAR" class="headerlink" title="VARCHAR"></a>VARCHAR</h3><ol>
<li>可变长的字符串 比定长类型CHAR更节省空间</li>
<li>需要使用额外的1 个或2个字符串来记录字符串的长度，小于255 只使用一个字节，大于使用2个</li>
</ol>
<h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><ol>
<li>TINYINT - 8 , SMALLINT - 16, MEDIUMINT - 24, INT - 32, BIGINT - 64 位的存储空间 -2的N-1次方到 2的N-1次方-1<br>2:可选 UNSIGNED属性 ，表示不允许负值 ，大致可以使正数上限提高一倍</li>
</ol>
<h3 id="实数类型"><a href="#实数类型" class="headerlink" title="实数类型"></a>实数类型</h3><ol>
<li>实数是带有小数部分的数字，也可以使用BECIMAL 格式 create table ta (a float,b decimal(6,5));6为小数点左边的位数，5为小数点右边的位数，当插入的小数点右边的位数大于5 后面的将被截掉，当插入小数点左边的位数大于6时，将取 999999</li>
<li>DECIMAL 是存储精确的小数，应该尽量只在小数进行精确计算时才使用，但数据量较大时，可以考虑使用BIGINT代替，要精确到万分之一的数据，可以把所有金额乘以一百万再存储进BIGINT里。</li>
<li>FLOAT 占用4个字节 </li>
<li>DOUBLE占用8个字节 相比FLOAT有更高的精度与更大的范围</li>
</ol>
<h3 id="DATETIME-和-TIMESAMP"><a href="#DATETIME-和-TIMESAMP" class="headerlink" title="DATETIME 和 TIMESAMP"></a>DATETIME 和 TIMESAMP</h3><ol>
<li>都可以存储相同的数据，时间和日期</li>
<li>TIMESAMP 只使用DATETIME一半的存储空间（4个字节与8个字节），并且根据时区变化，具有特殊的自动更新能力，但TIMESTAMP允许的时间范围小得多</li>
<li>DATETIME 范围 1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</li>
<li>TIMESAMP 范围 1970-01-01 08:00:01到2038-01-19 11:14:07</li>
<li>TIMESTAMP类型在默认情况下，insert、update 数据时，TIMESTAMP列会自动以当前时间（CURRENT_TIMESTAMP）填充/更新</li>
<li>使用INT存时间戳在业务上不方便处理的情况下，不建议使用</li>
</ol>
<p>BLOB与TEXT 类型</p>
<ol>
<li>BLOB 和TEXT类型都是为了存储很大的数据而设计的，分别采用二进制和字符方式存储</li>
<li>二进制类型有TINYBLOB,SMALLBLOB,BLOB,MEDIUMBLOB,LONGBLOB，字符类型是 TINYTEXT,SMALLTEXT,TEXT,MEDIUMTEXT,LONGTEXT，ENUM枚举与FIELD指定排序顺序</li>
</ol>
<h3 id="选择优化的数据类型"><a href="#选择优化的数据类型" class="headerlink" title="选择优化的数据类型"></a>选择优化的数据类型</h3><ol>
<li>更小的数据类型通常更好,它们占用更小的磁盘，内存和CPU缓存，处理时需要的CPU周期更少</li>
<li>简单就好,整型比字符操作代价更低，因为字符集和校对规则使字符比较整型比较更复杂</li>
<li>尽量避免NULL<ol>
<li>查询中包含可为NULL对MYSQL来说更难优化，因为可为NULL的列使得索引、索引统计和值 比较都较为复杂</li>
<li>可为NULL 的列使使用更多的存储空间，MYSQL里也需要特殊处理，当可为NULL被索引时,每个索引记录需要额外的字节</li>
<li>调优时，把可为NULL调为NOT NULL带来的性能提升比较小，除非确定此问题导致问题</li>
</ol>
</li>
<li>使用VARCHAR(5) 与 VARCHAR(200)存储的区别<ol>
<li>存储HELLO的空间开销是一样的，但是更长的列会消耗更多的内存，因为MYSQL通常会分配固定大小内存块来保存内部值</li>
<li>尤其是使用内存临时表时表进行排序或操作时会更糟糕</li>
</ol>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      字段类型,mysql
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 覆盖索引</title>
    <link href="http://yoursite.com/2016/01/02/Mysql-%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95/"/>
    <id>http://yoursite.com/2016/01/02/Mysql-覆盖索引/</id>
    <published>2016-01-02T02:53:13.000Z</published>
    <updated>2017-03-10T01:39:46.435Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol>
<li>覆盖索引能够极大地提高性能。 考虑一下如果查询只需要扫描索引而无须回表，会带来多少好处 <ol>
<li>索引的条目通常远小于数据行大小，所以如果只需要读取索引，那极大地减少数据访问量，所以更内容全部放在内存中</li>
<li>索引是按照列值顺序存储的（至少单个页内是这样的）</li>
<li>一些存储引擎如MyISAM 的内存只缓存索引。</li>
<li>由于innodb 的聚簇索引，覆盖索引 对Innodb表特别有用。 Innodb的二级索引在叶子节点中保存了行的主键值，所以如果二级主键能够覆盖查询，则可以避免对主键索引的二次查询</li>
</ol>
</li>
<li>mysql 只能用b-tree索引来做覆盖索引</li>
<li>当发起一个被索引覆盖的查询时，在 EXPLAIN 的extra列可以看到 “Using index”的信息</li>
</ol>
<p>例子</p>
<pre><code>explain select * from prodcuts where actor = &quot;yeyute&quot; and title like &apos; %aplollo%&apos;;
</code></pre><ol>
<li>没有任务索引能够覆盖这个查询，因为查询从表中选择了所有的列， 不过 where 条件中的表是有索引可以覆盖的</li>
<li>mysql 不能在索引中执行like 操作 。 mysql5.5以为更早版本，只允许在索引中做简单操作（&gt; 和 &gt;= 和 !=  ）,这种情况，mysql 只能提取数据行的值而不是索引值来做比较</li>
</ol>
<h3 id="使用索引扫描来做排序"><a href="#使用索引扫描来做排序" class="headerlink" title="使用索引扫描来做排序"></a>使用索引扫描来做排序</h3><ul>
<li>explain type列的值为“index”</li>
<li>如果索引不能覆盖查询所需的全部列，就得扫描查询所需的全部列</li>
<li>mysql 可以使用同一个索引既满足排序，又用于查找行</li>
<li>关联多表时，只有当order by 子句引用的字段全部为第一个表时，才能使用索引做排序</li>
<li>建立（sex,country），查询时不限制性别，可以在查询条件新增 sex in(‘m’,’f’) and country=’’ 来使用索引</li>
</ul>
]]></content>
    
    <summary type="html">
    
      覆盖索引,mysql
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 聚簇索引(Clustered Index)</title>
    <link href="http://yoursite.com/2016/01/01/Mysql-%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95/"/>
    <id>http://yoursite.com/2016/01/01/Mysql-聚簇索引/</id>
    <published>2016-01-01T06:18:32.000Z</published>
    <updated>2017-03-10T09:24:57.137Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol>
<li>每个表只能有一个聚簇索引，因为一个表中的记录只能以一种物理顺序存放，但是，一个表可以有不止一个非聚簇索引。例:你翻到新华字典的汉字“爬”那一页就是P开头的部分，这就是物理存储顺序（聚簇索引）；而不用你到目录，找到汉字“爬”所在的页码，然后根据页码找到这个字（非聚簇索引）</li>
<li>如果需要该索引,只要将索引指定为主键(primary key)就可以，根据主键创建聚簇索引</li>
<li>如果正在使用Innodb 表并且没有什么数据需要聚集，那么可以定义一个代理键作为主键，这种主键的数据应该和应用无关，最简单的方法是使用AUTO_INCREMENT 自增列。这样可以保证数据行是按顺序写入，对于根据主键做关联操作的性能也会更好。 </li>
<li>顺序的主键会造成什么坏的结果？ 在高并发插入可能导致间隙锁竞争，可以考虑重新设计表，或者更改innodb_autoinc_lock_mode参数（innodb在语句1的实际插入操作执行前就预分配给该语句三个自增值，当有一个新的insert语句2要执行时，读取的AUTO_INCREMENT=4，这样虽然语句1可能还没有执行完，语句2就可直接执行无需等待语句2。）</li>
</ol>
<h3 id="什么时候用到聚簇索引"><a href="#什么时候用到聚簇索引" class="headerlink" title="什么时候用到聚簇索引"></a>什么时候用到聚簇索引</h3><p>以下将id设置为主键时，mysql 会根据主键创建聚簇索引,例：如果没设置主键，自增，where id=’1000’，是扫描全表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`test_user`</span> (</div><div class="line">	<span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">	<span class="string">`user_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</div><div class="line">	<span class="string">`password`</span> <span class="built_in">CHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</div><div class="line">	PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>  <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure></p>
<p>设置id为主键，自增，以下是对应的分析数据</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">select</span> * <span class="keyword">from</span> test_user <span class="keyword">where</span> <span class="keyword">id</span>=<span class="string">'16000000'</span> ;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">字段</th>
<th style="text-align:left">值</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">select_type</td>
<td style="text-align:left">simple</td>
<td style="text-align:left">简单的 select 查询,不使用 union 及子查询</td>
</tr>
<tr>
<td style="text-align:left">table</td>
<td style="text-align:left">test_user</td>
<td style="text-align:left">表名</td>
</tr>
<tr>
<td style="text-align:left">partitions</td>
<td style="text-align:left">null</td>
<td style="text-align:left">列代表给定表所使用的分区</td>
</tr>
<tr>
<td style="text-align:left">type</td>
<td style="text-align:left">const</td>
<td style="text-align:left">是说明只有一条匹配值，</td>
</tr>
<tr>
<td style="text-align:left">possible_keys</td>
<td style="text-align:left">PRIMARY</td>
<td style="text-align:left">指出 MySQL 能在该表中使用哪些索引有助于 查询。如果为空,说明没有可用的索引</td>
</tr>
<tr>
<td style="text-align:left">key</td>
<td style="text-align:left">PRIMARY</td>
<td style="text-align:left">MySQL 实际从 possible_key 选择使用的索引</td>
</tr>
<tr>
<td style="text-align:left">key_len</td>
<td style="text-align:left">4</td>
<td style="text-align:left">使用的索引的长度。在不损失精确性的情况 下,长度越短越好</td>
</tr>
<tr>
<td style="text-align:left">ref</td>
<td style="text-align:left">const</td>
<td style="text-align:left">where 条件筛选后表上至多有一条元组匹配时</td>
</tr>
<tr>
<td style="text-align:left">rows</td>
<td style="text-align:left">1</td>
<td style="text-align:left">MYSQL 认为必须检查的用来返回请求数据的行数</td>
</tr>
<tr>
<td style="text-align:left">filtered</td>
<td style="text-align:left">100</td>
<td style="text-align:left">列给出了一个百分比的值，这个百分比值和rows列的值一起使用，可以估计出那些将要和QEP中的前一个表进行连接的行的数目。前一个表就是指id列的值比当前表的id小的表</td>
</tr>
</tbody>
</table>
<h3 id="主键设置为那个字段合适"><a href="#主键设置为那个字段合适" class="headerlink" title="主键设置为那个字段合适"></a>主键设置为那个字段合适</h3><p>情况分析</p>
<ol>
<li>选择聚簇索引应基于where子句和连接操作的类型。</li>
<li>在聚簇索引中不要包含经常修改的列，因为值修改后，数据行必须移动到新的位置。</li>
<li>大多数表都应该有聚簇索引或使用分区来降低对表尾页的竞争，在一个高事务的环境中，对最后一页的封锁严重影响系统的吞吐量</li>
<li>在聚簇索引下，数据在物理上按顺序排在数据页上，重复值也排在一起，因而在那些包含范围检查(between、&lt;、&lt;=、&amp; gt;、&gt;=)或使用group by或order by的查询时，一旦找到具有范围中第一个键值的行，具有后续索引值的行保证物理上毗连在一起而不必进一步搜索，避免了大范围扫描，可以大大提高查询速度。</li>
<li>在一个频繁发生插入操作的表上建立聚簇索引时，不要建在具有单调上升值的列(如IDENTITY)上，否则会经常引起封锁冲突。</li>
</ol>
<p>用户名字段，可以设置为主键，但是不推荐<br>1.用户名是比较规则字母数字序列，这可能导致性能上有所差别<br>2.假如以用户名作为主键并与其他表关联，当删除用户时，再创建一个同名的用户，可能导致这些关联紊乱。而绝对唯一的ID则不会。<br>3.有的系统可能会允许修改用户名，如果以用户名为主键，将带来很多麻烦。而如果以ID为主键进行关联，则没有此问题。</p>
<h3 id="聚簇索引中的记录是如何存放"><a href="#聚簇索引中的记录是如何存放" class="headerlink" title="聚簇索引中的记录是如何存放"></a>聚簇索引中的记录是如何存放</h3><ol>
<li>节点页只包含了索引列，叶子页包含了行的全部数据，就是既存储索引值,又在叶子中存储行的数据</li>
<li>Innodb是通过主键聚集数据，如果没有主键，Innodb会选择一个唯一的非空索引代替。如果没有这样的索引，会隐式定义一个主键来作为聚簇索引。</li>
<li>聚簇索引的每一个叶子节点都包含了主键值、事务ID、用于事务和MVCC的回滚指针以及所有的剩余列<br><img src="https://yeyute.github.io/assets/jcsy.png" alt=""></li>
</ol>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>可以把相关的数据保存在一起。 例如电子邮件，可以根据用户ID来聚集数据，这样只需要从磁盘读取少数的数据页就能获取某个用户的全部邮件。如果没有使用聚簇索引，则每封邮件都可能导致一次磁盘的I/O.</li>
<li>数据访问更快。将索引和数据保存在同一个B-Tree中，因此从聚簇索引中获取数据通常比非聚簇索引查找更快</li>
<li>使用覆盖索引扫描的查询可以直接使用页节点中的主键值</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>聚簇数据最大限度地提高了I/O密集型应用的性能，但如果数据全部都放在内存中，则访问的顺序就没那么重要了，聚会簇索引也就没什么优势</li>
<li>更新索引列代价很大，因为innodb 强制将每个被更新的行移动到新的位置</li>
<li>插入的速度严重依赖于插入顺充，按照主键的顺序插入是加载数据到INNODB表中速度最快的方式，如果不是，那么加载完成后最好 使用optimize table命令重新排序</li>
<li>对于插入新行，或主键更新，导致需要移动行的时候，可能面临“页分裂”问题。 当行的主键值要求必须将这一行插入到某个已满的页中时，存储引擎会将该页分裂成两个页面来容纳该行，会导致表占用更大的磁盘空间</li>
<li>可能会导致全表扫描变慢，尤其是行比较稀疏 或者 页分裂 存储不连续的时候</li>
</ol>
]]></content>
    
    <summary type="html">
    
      聚簇索引,mysql
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>http 请求报文详解</title>
    <link href="http://yoursite.com/2015/09/03/http-%E8%AF%B7%E6%B1%82%E4%BF%A1%E6%81%AF%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2015/09/03/http-请求信息详解/</id>
    <published>2015-09-02T16:51:24.000Z</published>
    <updated>2017-03-16T09:09:05.601Z</updated>
    
    <content type="html"><![CDATA[<h3 id="两类报文"><a href="#两类报文" class="headerlink" title="两类报文"></a>两类报文</h3><ol>
<li>请求报文</li>
<li>响应报文</li>
</ol>
<h3 id="报文分三部分"><a href="#报文分三部分" class="headerlink" title="报文分三部分"></a>报文分三部分</h3><h4 id="对报文进行描述的起始行（start-line）"><a href="#对报文进行描述的起始行（start-line）" class="headerlink" title="对报文进行描述的起始行（start line）"></a>对报文进行描述的起始行（start line）</h4><p>请求报文 GET /php.info HTTP/1.1</p>
<table>
<thead>
<tr>
<th style="text-align:left">报文内容</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">GET</td>
<td style="text-align:left">请求的方法</td>
</tr>
<tr>
<td style="text-align:left">/php.info</td>
<td style="text-align:left">请求的地址</td>
</tr>
<tr>
<td style="text-align:left">HTTP/1.1</td>
<td style="text-align:left">请求版本</td>
</tr>
</tbody>
</table>
<p>响应报文 HTTP/1.1 200 OK</p>
<table>
<thead>
<tr>
<th style="text-align:left">报文内容</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">HTTP/1.1</td>
<td style="text-align:left">响应版本</td>
</tr>
<tr>
<td style="text-align:left">200 OK</td>
<td style="text-align:left">响应的状态码 内容</td>
</tr>
</tbody>
</table>
<h4 id="包含属性的首部（header）块"><a href="#包含属性的首部（header）块" class="headerlink" title="包含属性的首部（header）块"></a>包含属性的首部（header）块</h4><p><strong>请求报文</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">报文内容</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">accept(接收)</td>
<td style="text-align:left">指定客户端能够接收的内容类型 text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,<em>/</em>;q=0.8</td>
</tr>
<tr>
<td style="text-align:left">Accept-Encoding</td>
<td style="text-align:left">gzip(数据格式 ), deflate(默认且目前仅使用deflate算法压缩data部分，此法用于压缩传输), sdch(即通过字典压缩算法对各个页面中相同的内容进行压缩，减少相同的内容的传输。如：一个网站中一般都是共同的头部和尾部，甚至一些侧边栏也是共同的。之前的方式每个页面打开的时候这些共同的信息都要重新加载，但使用SDCH压缩方式的话，那些共同的内容只用传输一次就可以了)</td>
</tr>
<tr>
<td style="text-align:left">Accept-Language</td>
<td style="text-align:left">zh-cn ,zh; q=0.8   接收语言Cache-Control:</td>
</tr>
<tr>
<td style="text-align:left">Cache-Control</td>
<td style="text-align:left">值为private、no-cache、must-revalidate，那么打开新窗口访问时都会重新访问服务器。 而如果指定了max-age值，那么在此值内的时间里就不会重新访问服务器，例如： Cache-control: max-age=5(表示当访问此网页后的5秒 内再次访问不会去服务器)</td>
</tr>
<tr>
<td style="text-align:left">connection</td>
<td style="text-align:left">keep-alive 默认是长连接 其优点是、在资源包含多个元素是(比如web页面中的图片)将减少下载时间，当Connection为Keep-Alive时、表示在Keep-Alive时间内不会断开连接。而非KeepAlive模式时、请求之后都将会断开</td>
</tr>
<tr>
<td style="text-align:left">host</td>
<td style="text-align:left">域名或ip</td>
</tr>
<tr>
<td style="text-align:left">If-Modified-Since</td>
<td style="text-align:left">使用If-Modified-Since标签，把上次服务器告诉它的文件最后修改时间返回到服务器端了，文件没有改动过，所以服务器返回的HTTP状态码是304，没有发送页面的内容</td>
</tr>
<tr>
<td style="text-align:left">Upgrade-Insecure-Requests</td>
<td style="text-align:left">值为1 则是告诉服务器，自己支持这种操作，也就是我能读懂你服务器发过来的上面这条信息，并且在以后发请求的时候不用http而用https</td>
</tr>
<tr>
<td style="text-align:left">User-Agent:</td>
<td style="text-align:left">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 表示请求的客户端浏览器详细信息</td>
</tr>
</tbody>
</table>
<p><strong>响应报文</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">报文内容</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Connection</td>
<td style="text-align:left">keep-alive* 默认是长连接 其优点是、在资源包含多个元素是(比如web页面中的图片)将减少下载时间，当Connection为Keep-Alive时、表示在Keep-Alive时间内不会断开连接。而非KeepAlive模式时、请求之后都将会断开</td>
</tr>
<tr>
<td style="text-align:left">Content-Encoding</td>
<td style="text-align:left">响应正文使用的数据压缩格式</td>
</tr>
<tr>
<td style="text-align:left">Content-language</td>
<td style="text-align:left">响应正文使用的语言</td>
</tr>
<tr>
<td style="text-align:left">Content-Type</td>
<td style="text-align:left">响应正文的类型（是图片还是二进制字符串）</td>
</tr>
<tr>
<td style="text-align:left">Date</td>
<td style="text-align:left">服务器响应的时间</td>
</tr>
<tr>
<td style="text-align:left">Last-Modified</td>
<td style="text-align:left">Sun, 26 Jun 2016 04:14:32 GMT* 最后修改的时间</td>
</tr>
<tr>
<td style="text-align:left">Server</td>
<td style="text-align:left">nginx/1.6.2* http服务器的类型/版本 这个有时会造成有人专门利用特定版本网页服务器漏洞进行攻击，nginx可以在配置文件中增加或修改server_tokens off 来去除版本号</td>
</tr>
<tr>
<td style="text-align:left">Link</td>
<td style="text-align:left">Accept-Encoding 响应头，明确告知缓存服务器按照 Accept-Encoding 字段的内容，分别缓存不同的版本</td>
</tr>
<tr>
<td style="text-align:left">Set-Cookie</td>
<td style="text-align:left">AST_LANG=zh; expires=Mon, 26-Jun-2015 14:37:17 GMT; Max-Age=31536000; path=/; domain=.php.net*</td>
</tr>
<tr>
<td style="text-align:left">Transfer-Encoding</td>
<td style="text-align:left">chunked 分块编码 表示输出的内容长度不能确定，报文中的实体需要改为用一系列分块来传输，每个分块包含十六进制的长度值和数据，长度值独占一行，长度不包括它结尾的 CRLF(\r\n)，也不包括分块数据结尾的 CRLF。最后一个分块长度值必须为 0，对应的分块数据没有内容，表示实体结束</td>
</tr>
<tr>
<td style="text-align:left">Vary</td>
<td style="text-align:left">参考此文章 <a href="https://imququ.com/post/vary-header-in-http.html" target="_blank" rel="external">https://imququ.com/post/vary-header-in-http.html</a></td>
</tr>
<tr>
<td style="text-align:left">X-Frame-Options</td>
<td style="text-align:left">DENY：浏览器拒绝当前页面加载任何Frame页面，SAMEORIGIN：frame页面的地址只能为同源域名下的页面，ALLOW-FROM：origin为允许frame加载的页面地址</td>
</tr>
<tr>
<td style="text-align:left">X-Powered-By</td>
<td style="text-align:left">PHP/5.2.1，可在php.ini中增加或修改 expose_php = Off关闭,使用了ThinkPHP会输出 ThinkPHP 2.0，可修改相关类文件关闭</td>
</tr>
<tr>
<td style="text-align:left">Cache-Control</td>
<td style="text-align:left">max-age=600 表示当访问此网页后的600秒内 告诉浏览器再次访问不去访问服务器</td>
</tr>
<tr>
<td style="text-align:left">Expires</td>
<td style="text-align:left">HTTP控制缓存的基本手段，这个属性告诉缓存器：相关副本在多长时间内是新鲜的。过了这个时间，缓存器就会向源服务器发送请求，检查文档是否被修 改。几乎所有的缓存服务器</td>
</tr>
<tr>
<td style="text-align:left">Content-Length</td>
<td style="text-align:left">实体长度 通常如果 Content-Length 比实际长度短，会造成内容被截断;如果比实体内容长，会造成 pending</td>
</tr>
</tbody>
</table>
<h4 id="可选的、包含数据的主体（body）"><a href="#可选的、包含数据的主体（body）" class="headerlink" title="可选的、包含数据的主体（body）"></a>可选的、包含数据的主体（body）</h4><p>就是http 要传输的内容</p>
]]></content>
    
    <summary type="html">
    
      http 报文
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>http 代理</title>
    <link href="http://yoursite.com/2015/07/03/http-%E4%BB%A3%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2015/07/03/http-代理详解/</id>
    <published>2015-07-02T17:16:49.000Z</published>
    <updated>2017-03-10T01:10:18.697Z</updated>
    
    <content type="html"><![CDATA[<h3 id="web-代理-proxy"><a href="#web-代理-proxy" class="headerlink" title="web 代理(proxy)"></a>web 代理(proxy)</h3><p>代理位于客户端和服务器之间，扮演“中间人”的角色，对web客户端来说是扮演服务器的角色，对服务器来说是扮演客户端的角色</p>
<h3 id="代理与网关的对比"><a href="#代理与网关的对比" class="headerlink" title="代理与网关的对比"></a>代理与网关的对比</h3><p>代理连接的是两个或多个使用相同协议的应用程序<br>网关扮演的是“协议转换器”的角色，即使客户端和服务器使用的是不同的协议，客户端也可以通过网关完成与服务器之间的事务处理，例：浏览器&lt;-&gt;web/e-mail 网关(pop) &lt;-&gt; e-mail服务器 ，网关将不同的协议连接起来</p>
<h3 id="为什么使用代理，运用的场景"><a href="#为什么使用代理，运用的场景" class="headerlink" title="为什么使用代理，运用的场景"></a>为什么使用代理，运用的场景</h3><ol>
<li>代理服务器可以看到并接触到所有流过的http流量，所以代理可以监视流量并对其进行修改<br>应用的场景</li>
<li>集中式访问控制代理(对禁止的站点强行禁止访问)</li>
<li>集中式文档访问控制代理</li>
<li>安全防火墙(提高安全性，以便对流量进行详细的检查)</li>
<li>web 缓存</li>
<li>反向代理，以制作于分布式网络</li>
<li>内容路由器（根据网络流量状态以及内容类型将请求导向特定的服务器）</li>
<li>转码器 例：可以在传输gif图片时，将其转换成jpeg图片，减少尺寸，也可以对图片进行压缩，同样可以对文本压缩</li>
<li>匿名者（主动从http报文中删除身份特性，例ip，from头部，referer(请求报头，告知服务器用户的来源页面)首部，cookie,uri的会话id）</li>
</ol>
<h3 id="反向代理与正向代理"><a href="#反向代理与正向代理" class="headerlink" title="反向代理与正向代理"></a>反向代理与正向代理</h3><p>反射代理 - 保护和隐藏原始资源服务器</p>
<p>情景- 用户 c -&gt;代理 a -&gt;机器 b</p>
<ol>
<li>正向代理 - 主体是 c，a是c的代理</li>
<li>反向代理 - 主体是 c，a是b的代理</li>
</ol>
<h3 id="代理服务器的部署的几种方式"><a href="#代理服务器的部署的几种方式" class="headerlink" title="代理服务器的部署的几种方式"></a>代理服务器的部署的几种方式</h3><ol>
<li>出口代理  控制本地网络与大型因特网之间的流量，公司部分网站控制访问等</li>
<li>访问（入口）代理  用于处理客户的聚合请求，。ISP使用缓存代理来存储常用文档的副本来提高用户的下载速度</li>
<li>反向代理</li>
<li>网络交换代理 将具有足够能力的代理放在网络之间的因特网对等交换点上，通过缓存来减轻因特网节点的拥塞，并对流量进行监视</li>
</ol>
<h3 id="代理如何获取流量的"><a href="#代理如何获取流量的" class="headerlink" title="代理如何获取流量的"></a>代理如何获取流量的</h3><ol>
<li>修改客户端 - 手动或自动修改浏览器代理配置，客户端的http请求直接发给代理</li>
<li>修改网络 - 在客户端不知道的情况下，拦截网络流量并将其导入代理，这种拦截称为拦截代理。例：连接使用公共wifi时，会有将所有的站点修改到本地的hosts,获取拦截的流量信息后再请求问点返回。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      http 代理详解
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>CGI、FastCGI、PHP-CGI、PHP-FPM 关系简单分析</title>
    <link href="http://yoursite.com/2015/05/11/CGI%E3%80%81FastCGI%E3%80%81PHP-CGI%E3%80%81PHP-FPM-%E5%85%B3%E7%B3%BB%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2015/05/11/CGI、FastCGI、PHP-CGI、PHP-FPM-关系简单分析/</id>
    <published>2015-05-11T02:12:52.000Z</published>
    <updated>2017-03-09T05:08:39.992Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CGI、FastCGI、PHP-CGI、PHP-FPM-关系简单总结"><a href="#CGI、FastCGI、PHP-CGI、PHP-FPM-关系简单总结" class="headerlink" title="CGI、FastCGI、PHP-CGI、PHP-FPM 关系简单总结"></a>CGI、FastCGI、PHP-CGI、PHP-FPM 关系简单总结</h3><table>
<thead>
<tr>
<th style="text-align:left">value</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">CGI</td>
<td style="text-align:left">抽象来说是通用的服务网关， 标准的CGI对每个请求都会解析php.ini文件，初始化执行环境</td>
</tr>
<tr>
<td style="text-align:left">PHP-CGI</td>
<td style="text-align:left">php-cgi只是解释PHP脚本的程序而已</td>
</tr>
<tr>
<td style="text-align:left">FastCGI</td>
<td style="text-align:left">一种管理php-cgi的协议(抽象)，一套由操作系统管理的php-cgi管理程序(具体) ，是用来提高CGI程序性能的</td>
</tr>
<tr>
<td style="text-align:left">PHP-FPM</td>
<td style="text-align:left">实现fast-cgi协议的具体程序</td>
</tr>
</tbody>
</table>
<p>例：mvc与tp框架的关系， mvc是一种设计模式，tp框架是实现mvc模式的具体程序。</p>
]]></content>
    
    <summary type="html">
    
      CGI、FastCGI、PHP-CGI、PHP-FPM
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 Memcached</title>
    <link href="http://yoursite.com/2015/03/11/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-Memcached/"/>
    <id>http://yoursite.com/2015/03/11/深入理解-Memcached/</id>
    <published>2015-03-11T06:41:37.000Z</published>
    <updated>2017-03-09T08:15:00.288Z</updated>
    
    <content type="html"><![CDATA[<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li>单个item 最大的数据 1M</li>
<li>单进程最大的使用内存 2G ，需要更多内存时可开多个端口</li>
<li>memcached 是多线程，非阻塞io复用的网络模型，redis 是单线程</li>
<li>键长最大250字节</li>
</ul>
<p>MEMCACHE_COMPRESSED为压缩选项，缩后数据一般为原数据大小的30%左右，节省了70%的传输性能消耗所得会大于文件压缩带来的性能损耗；<br>存的数据的确有大于几百字节的，如果都是小于100字节的键值对，压缩可能反而带来膨胀，</p>
<h3 id="常见的运用场景"><a href="#常见的运用场景" class="headerlink" title="常见的运用场景"></a>常见的运用场景</h3><ul>
<li>memcached来保持session，实现session共享（session跨服务器的一种解决方案）</li>
</ul>
<h3 id="解释压缩"><a href="#解释压缩" class="headerlink" title="解释压缩"></a>解释压缩</h3><blockquote>
<p>注：php 官网的memcache 扩展的最新几个版本，当value好像是大于20k时（具体数值待验证），会自动压缩，尝试过压缩后有乱码情况,尝试使用1。1版本的不会自动压缩的情况</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span>(<span class="variable">$this</span>-&gt;_key(<span class="variable">$key</span>), <span class="variable">$value</span>, MEMCACHE_COMPRESSED, <span class="variable">$ttl</span>);</div></pre></td></tr></table></figure>
<p>MEMCACHE_COMPRESSED为压缩选项缩后数据一般为原数据大小的30%左右，节省了70%的传输性能消耗所得会大于文件压缩带来的性能损耗；存的数据的确有大于几百字节的，如果都是小于100字节的键值对，压缩可能反而带来膨胀，Memcached中都是按照固定大小分块存储的，最小也要88 B。所以对于过小数据带来的压缩膨胀并不是太大的问题；</p>
<h3 id="内存管理机制（默认是使用Slab-Allocatoion机制分配、管理内存）"><a href="#内存管理机制（默认是使用Slab-Allocatoion机制分配、管理内存）" class="headerlink" title="内存管理机制（默认是使用Slab Allocatoion机制分配、管理内存）"></a>内存管理机制（默认是使用Slab Allocatoion机制分配、管理内存）</h3><ul>
<li>将内存分割成各种尺寸的块(chunk),并把尺寸相同的块分成组(chunk的集合)</li>
<li>page 是分配Slab的内存空间 默认是1M 根据Slab大小切分成chunk</li>
<li>chunk:用户缓存记录的内存空间</li>
<li>Slab class：特定chunk的组</li>
</ul>
<p>如何组织数据的呢？<br>内存分配流程</p>
<p><img src="https://yeyute.github.io/assets/memcached.png" alt="memcached"></p>
<table>
<thead>
<tr>
<th style="text-align:left">内存单位</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">slab</td>
<td style="text-align:left">数据大小相似的为一类, 放在同一个slab中.(按照chunk分类)</td>
</tr>
<tr>
<td style="text-align:left">page</td>
<td style="text-align:left">每个page分配1M大小, 该类slab下的chunk用完, 重新申请一个page; 分配一次的大小. 如果没有page, 每次分配初始化一个chunk太浪费资源.</td>
</tr>
<tr>
<td style="text-align:left">chunk</td>
<td style="text-align:left">数据存放最小也是最大的单位, 一个key对应的数据不能跨chunk(默认最大为1M)</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">内存分配参数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">used_chunks</td>
<td style="text-align:left">已分配给item的chunk数量, 只分配, 不一定使用（初始化）</td>
</tr>
<tr>
<td style="text-align:left">free_chunks</td>
<td style="text-align:left">尚未分配的chunk数量, 由delete释放的chunk(get不到时也会释放)</td>
</tr>
<tr>
<td style="text-align:left">free_chunks_end</td>
<td style="text-align:left">分配后还没有被使用过的chunk</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      深入理解 Memcached
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="nosql" scheme="http://yoursite.com/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>hexo 命令</title>
    <link href="http://yoursite.com/2015/03/10/hexo-%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2015/03/10/hexo-命令/</id>
    <published>2015-03-10T02:06:47.000Z</published>
    <updated>2017-03-10T01:46:00.682Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 全局安装安装</span></div><div class="line">npm install hexo -g</div><div class="line"><span class="meta"># 升级  </span></div><div class="line">npm update hexo -g  </div><div class="line"><span class="meta"># 初始化 </span></div><div class="line">hexo init</div></pre></td></tr></table></figure>
<h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 本地启动服务</span></div><div class="line">hexo <span class="attr">s</span> == hexo server  </div><div class="line"><span class="comment"># 生成静态文件</span></div><div class="line">hexo <span class="attr">g</span> = hexo generate </div><div class="line"><span class="comment"># 部署,将代码上传到配置的服务器</span></div><div class="line">hexo <span class="attr">d</span> == hexo deploy</div></pre></td></tr></table></figure>
<h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 新建文章</span></div><div class="line">hexo <span class="keyword">new</span> <span class="string">"postName"</span></div><div class="line"><span class="meta"># 新建页面 </span></div><div class="line">hexo <span class="keyword">new</span> page <span class="string">"pageName"</span></div></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除 ./source/_posts/里对应的md文件. ps:不能全部删除，会报错。<br>然后对应执行</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo <span class="attr">g</span> == hexo generate<span class="comment">#生成</span></div><div class="line">hexo <span class="attr">s</span> == hexo server <span class="comment">#启动服务预览</span></div><div class="line">hexo <span class="attr">d</span> == hexo deploy<span class="comment">#部署</span></div></pre></td></tr></table></figure>
<p>hexo clean,直接把public下的所有文章和分类目录都删除了,tags,archices,categories也会重新布局,请小心操作</p>
<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Hexo 会监视文件变动并自动更新，您无须重启服务器。</span></div><div class="line">hexo server </div><div class="line"><span class="meta"># 静态模式</span></div><div class="line">hexo server -s </div><div class="line"><span class="meta"># 更改端口</span></div><div class="line">hexo server -p <span class="number">5000</span> </div><div class="line"><span class="meta"># 自定义 IP</span></div><div class="line">hexo server -i <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></div><div class="line"></div><div class="line"><span class="meta"># 清除缓存 网页正常情况下可以忽略此条命令,public 文件夹内容将全部删除</span></div><div class="line">hexo clean </div><div class="line"><span class="meta"># 生成静态网页</span></div><div class="line">hexo g </div><div class="line"><span class="meta"># 开始部署</span></div><div class="line">hexo d</div></pre></td></tr></table></figure>
<h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 使用 Hexo 生成静态文件快速而且简单</div><div class="line">hexo <span class="keyword">generate</span></div><div class="line"># 监视文件变动</div><div class="line">hexo <span class="keyword">generate</span> --watch</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      hexo
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
