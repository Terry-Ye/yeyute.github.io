<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AT的博客</title>
  <subtitle>放下杂念,幸福天天</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-03T09:51:46.298Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>AT</name>
    <email>terry.dawu@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【学习笔记】hexo 命令</title>
    <link href="http://yoursite.com/2017/03/03/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91hexo-%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/03/03/【学习笔记】hexo-命令/</id>
    <published>2017-03-03T02:06:47.000Z</published>
    <updated>2017-03-03T09:51:46.298Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 全局安装安装</span></div><div class="line">npm install hexo -g</div><div class="line"><span class="meta"># 升级  </span></div><div class="line">npm update hexo -g  </div><div class="line"><span class="meta"># 初始化 </span></div><div class="line">hexo init</div></pre></td></tr></table></figure>
<h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 本地启动服务</span></div><div class="line">hexo <span class="attr">s</span> == hexo server  </div><div class="line"><span class="comment"># 生成静态文件</span></div><div class="line">hexo <span class="attr">g</span> = hexo generate </div><div class="line"><span class="comment"># 部署,将代码上传到配置的服务器</span></div><div class="line">hexo <span class="attr">d</span> == hexo deploy</div></pre></td></tr></table></figure>
<h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 新建文章</span></div><div class="line">hexo <span class="keyword">new</span> <span class="string">"postName"</span></div><div class="line"><span class="meta"># 新建页面 </span></div><div class="line">hexo <span class="keyword">new</span> page <span class="string">"pageName"</span></div></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除 ./source/_posts/里对应的md文件. ps:不能全部删除，会报错。<br>然后对应执行</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo <span class="attr">g</span> == hexo generate<span class="comment">#生成</span></div><div class="line">hexo <span class="attr">s</span> == hexo server <span class="comment">#启动服务预览</span></div><div class="line">hexo <span class="attr">d</span> == hexo deploy<span class="comment">#部署</span></div></pre></td></tr></table></figure>
<p>hexo clean,直接把public下的所有文章和分类目录都删除了,tags,archices,categories也会重新布局,请小心操作</p>
<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Hexo 会监视文件变动并自动更新，您无须重启服务器。</span></div><div class="line">hexo server </div><div class="line"><span class="meta"># 静态模式</span></div><div class="line">hexo server -s </div><div class="line"><span class="meta"># 更改端口</span></div><div class="line">hexo server -p <span class="number">5000</span> </div><div class="line"><span class="meta"># 自定义 IP</span></div><div class="line">hexo server -i <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></div><div class="line"></div><div class="line"><span class="meta"># 清除缓存 网页正常情况下可以忽略此条命令,public 文件夹内容将全部删除</span></div><div class="line">hexo clean </div><div class="line"><span class="meta"># 生成静态网页</span></div><div class="line">hexo g </div><div class="line"><span class="meta"># 开始部署</span></div><div class="line">hexo d</div></pre></td></tr></table></figure>
<h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 使用 Hexo 生成静态文件快速而且简单</div><div class="line">hexo <span class="keyword">generate</span></div><div class="line"># 监视文件变动</div><div class="line">hexo <span class="keyword">generate</span> --watch</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      hexo
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
  </entry>
  
  <entry>
    <title>秒杀活动的架构设计</title>
    <link href="http://yoursite.com/2016/03/09/%E7%A7%92%E6%9D%80%E6%B4%BB%E5%8A%A8%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2016/03/09/秒杀活动的架构设计/</id>
    <published>2016-03-09T09:04:18.000Z</published>
    <updated>2017-03-09T07:14:05.230Z</updated>
    
    <content type="html"><![CDATA[<h3 id="业务的基本说明"><a href="#业务的基本说明" class="headerlink" title="业务的基本说明"></a>业务的基本说明</h3><ol>
<li>运营评估最高的并发会达到  10W（根据推广的力度，以及以往的经验）</li>
<li>业务现有的服务器架构 反向代理 4台，前端机 8台， db 2台（主从），redis 2台（主从）以下是服务器架构图</li>
</ol>
<p><img src="https://yeyute.github.io/assets/msjgt.jpg" alt="服务器架构图"></p>
<h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><p>html 等静态文件上CDN ，这方面压力不大<br>后台程序动态接口，必须支持高并发，用户体验必须做好<br>后端程序优化点（欢迎大家补充）</p>
<ul>
<li>程序尽可能的减少加载的文件</li>
<li>程序减少不必要的网络请求</li>
<li>redis 队列来作 异步方式实现</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 后台进程消费队列 个人使用brpoplpush方法 取出数据并用存入另外队列作数据备份</span></div><div class="line">$block_expire_time = <span class="number">0</span>; <span class="comment"># 设置阻塞等待时间为永久</span></div><div class="line">$redis-&gt;brpoplpush($key, $backup_key, $block_expire_time);</div></pre></td></tr></table></figure>
<ul>
<li>redis 缓存</li>
<li>前端点击按钮请求后变灰，防止用户重复点击</li>
<li>静态文件上CDN </li>
<li>nginx的最大连接数设置为550，防止连接数过大时全部到php，导致php服务挂了</li>
<li>针对每个用户加并发锁（redis），防止高并发情况判断条件被绕过,程序执行完后解锁。</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$lock_status = $redis-&gt;set($lock_key, <span class="number">1</span>, <span class="keyword">array</span>(<span class="string">"NX"</span>, <span class="string">"EX"</span>=&gt;$expire_time));</div></pre></td></tr></table></figure>
<h3 id="高并发下奖品超发问题"><a href="#高并发下奖品超发问题" class="headerlink" title="高并发下奖品超发问题"></a>高并发下奖品超发问题</h3><p>个人设计的方案：提前把每个奖品放入 redis队列，每个key一个奖品，队列的长度是奖品的数量，可以保证奖品不会超发放<br>另外，假设使用<br>悲观锁，在更新数据的时候加锁，其它的都为等待状态，不合适秒杀场景<br>乐观锁 基本是采用带版本号更新，版本号匹配才能更新，其它的回滚，虽然保证的数据的安全不超发放，但是在高并发场景下，DB只有两台的时候，超过mysql 进程堆积肯定会的， 超过最大连接数是怎么办，一系列的问题需要解决，所以该方案不合适</p>
<h3 id="程序压测结果分析服务器能抗的并发"><a href="#程序压测结果分析服务器能抗的并发" class="headerlink" title="程序压测结果分析服务器能抗的并发"></a>程序压测结果分析服务器能抗的并发</h3><p>在平均响应时间300ms内，单台qps 750 左右（保持300ms是公司压测试的规范指标）<br>10台机器（后面新增2台到 8+2）一秒钟能处理： 10 * 750/0.3 = 25000<br>但是系统在高并发的状态下，响应时间有可能从300ms 变成500ms，所以在做评估，需要预留一定的空间<br>那么问题来了，<br>保守的并发只有1.5W,与10w 差距大，需要在执行方案上解决，公司不可无限的申请web机器。<br>解决10W并发问题(资源有限的情况)方案<br>在代理层做处理，根据权重挡掉90%的量，返回800（自定义），前端判断是否为800，是则提示火爆用户重试（对应的方案设置友好一些）</p>
<h3 id="活动的序列图及说明"><a href="#活动的序列图及说明" class="headerlink" title="活动的序列图及说明"></a>活动的序列图及说明</h3><ol>
<li>接口程序不连接查询mysql数据库</li>
<li>奖品的数据存放redis队列，每个奖品一个key，队列长度是奖品的数量</li>
<li>用户成功领取红包（或抢购）时的代码流程（不包括业务限制与防刷），从队列获取奖品成功，再入队列（此队列后台消费入库），返回给用户领取成功。在用户体验上有所提升，但如果后台队列堆积太多，未能消费完成，用户查看的红包时是没有对应记录的，所以针对自己的需求作对应的优化。</li>
</ol>
<p><img src="https://yeyute.github.io/assets/xlt.jpg" alt="活动流程图"></p>
<h3 id="活动流程图（开爷画的）"><a href="#活动流程图（开爷画的）" class="headerlink" title="活动流程图（开爷画的）"></a>活动流程图（开爷画的）</h3><p><img src="https://yeyute.github.io/assets/lct.png" alt="活动流程图"></p>
]]></content>
    
    <summary type="html">
    
      稳定版本的设计
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="架构设计" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>CGI、FastCGI、PHP-CGI、PHP-FPM 关系简单分析</title>
    <link href="http://yoursite.com/2015/05/11/CGI%E3%80%81FastCGI%E3%80%81PHP-CGI%E3%80%81PHP-FPM-%E5%85%B3%E7%B3%BB%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2015/05/11/CGI、FastCGI、PHP-CGI、PHP-FPM-关系简单分析/</id>
    <published>2015-05-11T02:12:52.000Z</published>
    <updated>2017-03-09T05:08:39.992Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CGI、FastCGI、PHP-CGI、PHP-FPM-关系简单总结"><a href="#CGI、FastCGI、PHP-CGI、PHP-FPM-关系简单总结" class="headerlink" title="CGI、FastCGI、PHP-CGI、PHP-FPM 关系简单总结"></a>CGI、FastCGI、PHP-CGI、PHP-FPM 关系简单总结</h3><table>
<thead>
<tr>
<th style="text-align:left">value</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">CGI</td>
<td style="text-align:left">抽象来说是通用的服务网关， 标准的CGI对每个请求都会解析php.ini文件，初始化执行环境</td>
</tr>
<tr>
<td style="text-align:left">PHP-CGI</td>
<td style="text-align:left">php-cgi只是解释PHP脚本的程序而已</td>
</tr>
<tr>
<td style="text-align:left">FastCGI</td>
<td style="text-align:left">一种管理php-cgi的协议(抽象)，一套由操作系统管理的php-cgi管理程序(具体) ，是用来提高CGI程序性能的</td>
</tr>
<tr>
<td style="text-align:left">PHP-FPM</td>
<td style="text-align:left">实现fast-cgi协议的具体程序</td>
</tr>
</tbody>
</table>
<p>例：mvc与tp框架的关系， mvc是一种设计模式，tp框架是实现mvc模式的具体程序。</p>
]]></content>
    
    <summary type="html">
    
      CGI、FastCGI、PHP-CGI、PHP-FPM
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 Memcached</title>
    <link href="http://yoursite.com/2015/03/11/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-Memcached/"/>
    <id>http://yoursite.com/2015/03/11/深入理解-Memcached/</id>
    <published>2015-03-11T06:41:37.000Z</published>
    <updated>2017-03-09T08:11:37.388Z</updated>
    
    <content type="html"><![CDATA[<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li>单个item 最大的数据 1M</li>
<li>单进程最大的使用内存 2G ，需要更多内存时可开多个端口</li>
<li>memcached 是多线程，非阻塞io复用的网络模型，redis 是单线程</li>
<li>键长最大250字节</li>
</ul>
<p>MEMCACHE_COMPRESSED为压缩选项，缩后数据一般为原数据大小的30%左右，节省了70%的传输性能消耗所得会大于文件压缩带来的性能损耗；<br>存的数据的确有大于几百字节的，如果都是小于100字节的键值对，压缩可能反而带来膨胀，</p>
<h3 id="常见的运用场景"><a href="#常见的运用场景" class="headerlink" title="常见的运用场景"></a>常见的运用场景</h3><ul>
<li>memcached来保持session，实现session共享（session跨服务器的一种解决方案）</li>
</ul>
<h3 id="解释压缩"><a href="#解释压缩" class="headerlink" title="解释压缩"></a>解释压缩</h3><blockquote>
<p>注：php 官网的memcache 扩展的最新几个版本，当value好像是大于20k时（具体数值待验证），会自动压缩，尝试过压缩后有乱码情况,尝试使用1。1版本的不会自动压缩的情况</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span>(<span class="variable">$this</span>-&gt;_key(<span class="variable">$key</span>), <span class="variable">$value</span>, MEMCACHE_COMPRESSED, <span class="variable">$ttl</span>);</div></pre></td></tr></table></figure>
<p>MEMCACHE_COMPRESSED为压缩选项缩后数据一般为原数据大小的30%左右，节省了70%的传输性能消耗所得会大于文件压缩带来的性能损耗；存的数据的确有大于几百字节的，如果都是小于100字节的键值对，压缩可能反而带来膨胀，Memcached中都是按照固定大小分块存储的，最小也要88 B。所以对于过小数据带来的压缩膨胀并不是太大的问题；</p>
<h3 id="内存管理机制（默认是使用Slab-Allocatoion机制分配、管理内存）"><a href="#内存管理机制（默认是使用Slab-Allocatoion机制分配、管理内存）" class="headerlink" title="内存管理机制（默认是使用Slab Allocatoion机制分配、管理内存）"></a>内存管理机制（默认是使用Slab Allocatoion机制分配、管理内存）</h3><ul>
<li>将内存分割成各种尺寸的块(chunk),并把尺寸相同的块分成组(chunk的集合)</li>
<li>page 是分配Slab的内存空间 默认是1M 根据Slab大小切分成chunk</li>
<li>chunk:用户缓存记录的内存空间</li>
<li>Slab class：特定chunk的组</li>
</ul>
<p>如何组织数据的呢？<br>内存分配流程</p>
<p><img src="http://localhost:4000/assets/memcached.png" alt="memcached"></p>
<table>
<thead>
<tr>
<th style="text-align:left">内存单位</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">slab</td>
<td style="text-align:left">数据大小相似的为一类, 放在同一个slab中.(按照chunk分类)</td>
</tr>
<tr>
<td style="text-align:left">page</td>
<td style="text-align:left">每个page分配1M大小, 该类slab下的chunk用完, 重新申请一个page; 分配一次的大小. 如果没有page, 每次分配初始化一个chunk太浪费资源.</td>
</tr>
<tr>
<td style="text-align:left">chunk</td>
<td style="text-align:left">数据存放最小也是最大的单位, 一个key对应的数据不能跨chunk(默认最大为1M)</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">内存分配参数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">used_chunks</td>
<td style="text-align:left">已分配给item的chunk数量, 只分配, 不一定使用（初始化）</td>
</tr>
<tr>
<td style="text-align:left">free_chunks</td>
<td style="text-align:left">尚未分配的chunk数量, 由delete释放的chunk(get不到时也会释放)</td>
</tr>
<tr>
<td style="text-align:left">free_chunks_end</td>
<td style="text-align:left">分配后还没有被使用过的chunk</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      深入理解 Memcached
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="nosql" scheme="http://yoursite.com/tags/nosql/"/>
    
  </entry>
  
</feed>
